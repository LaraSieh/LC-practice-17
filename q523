523. Continuous Subarray Sum Add to List
DescriptionHintsSubmissionsSolutions
Total Accepted: 10192
Total Submissions: 46582
Difficulty: Medium
Contributors:
xuehaohu
Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.

Example 1:
Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.
Example 2:
Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.
Note:
The length of the array won't exceed 10,000.
You may assume the sum of all the numbers is in the range of a signed 32-bit integer.



class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        if (k==0) {
           int prev = -1;
           for (int i : nums) {
               if (i==0 && prev==0) return true;
               prev = i;
           } 
           return false;
        }
        
        if (k<0) k = -k;
        unordered_map<int,int> m;
        
        int sum = 0;
        for (int i=0; i<nums.size(); ++i) {
            sum += nums[i]; 
            int r = sum%k; 
            if (r==0 && i>0) return true;
            if (m.find(r)!=m.end() && sum>m[r]) return true;
            m[r] == sum;
        }
        
        return false;
    }
};

// using set
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n = nums.size(), sum = 0, pre = 0;
        unordered_set<int> s;
        for (int i = 0; i < n; ++i) {
            sum += nums[i];
            int mod = k == 0 ? sum : sum % k;
            if (s.count(mod)) return true;
            s.insert(pre);
            pre = mod;
        }
        return false;
    }
};
