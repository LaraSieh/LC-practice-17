572. Subtree of Another Tree
Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if (t == nullptr) return true;
        if (s == nullptr) return false;
        
        return (IsSameTree(s,t) || isSubtree(s->left,t) || isSubtree(s->right,t));
    }
    
    bool IsSameTree(TreeNode *t1, TreeNode *t2) {
        if (t1==nullptr && t2==nullptr) return true;
        if (t1==nullptr || t2==nullptr) return false;
        if (t1->val != t2->val) return false;
        
        // at this point, t1->val == t2->val and t1!=nullptr and t2!=nullptr
        return (IsSameTree(t1->left,t2->left) && IsSameTree(t1->right,t2->right));
    }
};


// same algorithm but shorter code
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        return (!t || (s && (isSameTree(s,t) || isSubtree(s->left,t) || isSubtree(s->right,t)))); 
    }

private:     
    bool isSameTree(TreeNode *t1, TreeNode *t2) {
        return (!t1 ? !t2 : (t2 && (t1->val==t2->val) && isSameTree(t1->left,t2->left) && isSameTree(t1->right,t2->right)));
    }
};
