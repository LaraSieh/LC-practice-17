516. Longest Palindromic Subsequence Add to List
DescriptionHintsSubmissionsSolutions
Total Accepted: 9745
Total Submissions: 22940
Difficulty: Medium
Contributors:
Stomach_ache
Given a string s, find the longest palindromic subsequence's length in s. You may assume that the maximum length of s is 1000.

Example 1:
Input:

"bbbab"
Output:
4
One possible longest palindromic subsequence is "bbbb".
Example 2:
Input:

"cbbd"
Output:
2
One possible longest palindromic subsequence is "bb".




class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        vector<vector<int>>  d(n,vector<int>(n,0));
        
        int maxcnt=0;
        for (int j=0; j<n;  ++j) {
            for (int i=j; i>=0; --i) {
                if (s[j]==s[i]) {
                    if (j < i+2)  
                        d[i][j]=j-i+1;
                    else 
                        d[i][j] = d[i+1][j-1]+2;
                      
                    maxcnt=max(maxcnt,d[i][j]);
                 } else {
                    // j won't be 0 because otherwise i=0, that will fall in the first category
                    d[i][j] = max(d[i+1][j], d[i][j-1]);
                 }
            }
        }
        return maxcnt;
    }
};



// concise version
class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        vector<vector<int>>  d(n,vector<int>(n,1));
        
        for (int j=0; j<n;  ++j) {
            for (int i=j-1; i>=0; --i) {
                if (s[j]==s[i])
                    d[i][j] = ( j < i+2 ? 0:  d[i+1][j-1]) + 2;
                 else 
                    // j won't be 0 because otherwise i=0, that will fall in the first category
                    d[i][j] = max(d[i+1][j], d[i][j-1]);
            }
        }
        return d[0][n-1];
    }
};
